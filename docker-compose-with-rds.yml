# 构建docker-compose项目
# docker compose --log-level INFO up -- build
# docker compose --log-level INFO up -d --build

version: '3'
services:
  #  jvue-nginx:
  #    image: jvue/nginx:1.15.9
  #    container_name: jvue-nginx
  #    build:
  #      context: ./
  #      dockerfile: ./jvue-nginx/Dockerfile
  #    ports:
  #      - "80:80"
  #    volumes:
  #      - ./jvue-nginx/nginx.conf:/etc/nginx/conf.d/default.conf
  #      - ./data/nginx/log:/var/log/nginx
  #    restart: "no"
  jvue-server:
    image: jvue/server:4.0.1
    container_name: jvue-server
    build:
      context: ./
      dockerfile: ./jvue-server/Dockerfile
    ports:
      - "8008:8008"
    working_dir: /app
    command: mvn clean spring-boot:run -Dspring-boot.run.profiles=rds -DskipTests
    volumes:
      - ./jvue-server:/app
      - ./data/maven/.m2:/root/.m2
      - ./data/server/logs:/logs
    restart: "no"
#  jvue-front:
#    container_name: jvue-front
#    image: jvue/front:4.0.1
#    build:
#      context: .
#      dockerfile: ./jvue-front/Dockerfile
#    ports:
#      - "3000:3000"
#    environment:
#      - npm_config_unsafe_perm=true
#    restart: "no"
  jvue-artalk:
    image: jvue/artalk:2.8.3
    container_name: jvue-artalk
    build:
      context: ./
      dockerfile: ./jvue-artalk/Dockerfile
    ports:
      - 8005:23366
    volumes:
      - ./jvue-artalk/data:/data
      - ./jvue-artalk/ssl/certs/v4.pem:/etc/ssl/certs/v4.pem
      - ./jvue-artalk/ssl/certs/v4.key:/etc/ssl/certs/v4.key