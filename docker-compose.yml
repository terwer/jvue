# 构建docker-compose项目
# docker compose --log-level INFO up -- build
# docker compose --log-level INFO up -d --build

version: '3'
services:
  jvue-nginx:
    image: jvue/nginx:1.15.9
    container_name: jvue-nginx
    build:
      context: ./
      dockerfile: ./jvue-nginx/Dockerfile
    ports:
      - "80:80"
    environment:
      - HOST=0.0.0.0
    volumes:
      - ./jvue-nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./data/nginx/log:/var/log/nginx
    restart: "no"
  jvue-mysql:
    image: jvue/mysql:5.7.24
    container_name: jvue-mysql
    build:
      context: ./
      dockerfile: ./jvue-mysql/Dockerfile
    ports:
      - "3306:3306"
    environment:
      - HOST=0.0.0.0
      # 最好使用此设定时区，其它静像也可以使用,也可以用"TZ=Asia/Shanghai"
      - "TZ=CST-8"
      - "MYSQL_ROOT_PASSWORD=123456"
      - "MYSQL_ROOT_HOST=%"
      - "MYSQL_DATABASE=bugucms4"
      - "MYSQL_USER=terwer"
      - "MYSQL_PASSWORD=123456"
    volumes:
      - ./data/mysql/db:/var/db
      - ./data/mysql/log:/var/log
      - ./jvue-mysql/my.cnf:/etc/my.cnf
      - ./jvue-mysql/init:/docker-entrypoint-initdb.d/
    restart: always
  jvue-server:
    image: jvue/server:4.0.1
    container_name: jvue-server
    build:
      context: ./
      dockerfile: ./jvue-server/Dockerfile
    ports:
      - "8002:8002"
    environment:
      - HOST=0.0.0.0
    working_dir: /app
    command: mvn clean spring-boot:run -Dspring-boot.run.profiles=docker -DskipTests
    volumes:
      - ./jvue-server:/app
      - ./data/maven/.m2:/root/.m2
      - ./data/server/logs:/logs
    restart: "no"
  jvue-front:
    container_name: jvue-front
    image: jvue/front:4.0.1
    build:
      context: .
      dockerfile: ./jvue-front/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - HOST=0.0.0.0
      - npm_config_unsafe_perm=true
    restart: "no"